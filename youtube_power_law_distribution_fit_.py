# -*- coding: utf-8 -*-
"""Youtube_power-law distribution fit .ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1aLltLJLXsZalaBvxan7sAFAfUhT_GgM1
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

data = pd.read_csv('../data/Updated_data_all_eng.csv')

channel_counts = data['snippet.channelTitle'].value_counts()

## extract and sort the channel names and video volume
channels = channel_counts.index.tolist()
video_volume = channel_counts.values.tolist()
dataset_sorted = sorted(zip(channels, video_volume), key = lambda x: x[1], reverse = True)
channels_sorted, video_volume_sorted = zip(*dataset_sorted)

#plt.bar(channels_sorted, video_volume_sorted)
#plt.xlabel('Channels')
#plt.ylabel('Video Volume')
#plt.title('Volume of Videos per Channel')
#plt.xticks(rotation = 90)
#plt.show()

##fit a power-law distribution line
log_volume = np.log(video_volume_sorted)
log_rank = np.log(range(1, len(video_volume_sorted) + 1))

## perform linear regression and plot
coefficients = np.polyfit(log_rank, log_volume, 1)
k = -coefficients[0] ## this is exponent k
power_law_line = np.exp(coefficients[1]) * (range(1, len(video_volume_sorted) +1) ** (-k))

plt.bar(channels_sorted, video_volume_sorted)
plt.plot(channels_sorted, power_law_line, color = 'red')
plt.xlabel('Channel Names')
plt.ylabel('Expected Video Volume')
plt.title('Volume of Videos per Channel with Power-Law Distribution Fit')
plt.show()

print('Exponent k: ', k)